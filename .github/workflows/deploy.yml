name: Deploy to AWS App Runner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: news-search-agent
  IMAGE_TAG: latest
  APP_RUNNER_SERVICE_NAME: news-search-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Generate App Runner configuration
      run: |
        cat > apprunner-config.json << EOF
        {
          "ImageRepository": {
            "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
            "ImageRepositoryType": "ECR",
            "ImageConfiguration": {
              "Port": "8080",
              "RuntimeEnvironmentVariables": {
                "AWS_ACCESS_KEY_ID": "${{ secrets.AWS_ACCESS_KEY_ID }}",
                "AWS_SECRET_ACCESS_KEY": "${{ secrets.AWS_SECRET_ACCESS_KEY }}",
                "AWS_REGION": "${{ env.AWS_REGION }}"
              }
            }
          },
          "AuthenticationConfiguration": {
            "AccessRoleArn": "${{ secrets.APPRUNNER_ACCESS_ROLE_ARN }}"
          }
        }
        EOF

    - name: Deploy to App Runner
      run: |
        # Check if service exists
        if aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE_NAME }}']" --output text | grep -q .; then
          # Update existing service
          aws apprunner update-service \
            --service-name ${{ env.APP_RUNNER_SERVICE_NAME }} \
            --source-configuration file://apprunner-config.json
        else
          # Create new service
          aws apprunner create-service \
            --service-name ${{ env.APP_RUNNER_SERVICE_NAME }} \
            --source-configuration file://apprunner-config.json
        fi